#! /usr/bin/python
# SniffyDB is a CS 411 Project 
# by Shane Rogers, Simon Kim, Donald Cha and Danny Gaeta
# Fall Semester 2015
# SEE README FILE FOR MORE INFO

#used to check pcap input
import sys 
import json
import codecs
import base64

#used to silence unnecessary warnings
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR) 

#import scapy
from scapy.all import *

# Check to make sure user passed in a pcap file
if len(sys.argv) != 2:
    print("Usage: ./sniffy <pcap name>")
    print "For more info try: ./sniffy --help"
    exit()

if sys.argv[1] == "--help":
    print "############################################################"
    print "                    WElCOME TO SNIFFY"
    print "############################################################"
    print "#                                                          #"
    print "# Sniffy is a TCP packet sniffer and quite easy to use.    #"
    print "# Just activate sniffy and pass it the pcap file you       #"
    print "# would like to extract TCP packet information from        #"
    print "# Like this:                                               #"
    print "#                                                          #"
    print "#               ./sniffy mypcap.pcap                       #"
    print "#                                                          # "
    print "# Sniffy will extract all information available from all   #"
    print "# TCP packets inside of your pcap, including packet data   #"
    print "# if available and will write all of the data into a file  #"
    print "# named sniffy_output.txt in your current directory.       #"
    print "#                                                          # "
    print "############################################################"
    print " Sniffy was written and is maintained by Shane Rogers using"
    print " Python and the Scapy library 2014   shane@shanerogers.info   "
    print "############################################################"
    
    exit()

# Set pcap to the name of the file and open it
# Print to screen that pcap is being opened 

pcap = sys.argv[1]
print " "
print " Opening",
print sys.argv[1]
print " "
filename = "~/sniffydb/pcaps/" + pcap
pkts = rdpcap(filename)

# Read all packets from pcap file and filter out
# only those having to do with TCP

pkt_no = 0
#sys.stdout = open('sniffy_output.txt', 'w')
pcap_json = open('pcap.json', 'w+')
_test = open('_temp', 'w+')
packet_data = []





for p in pkts:
    pkt_no += 1
    ## write summary and other info from packets to file
    if p.haslayer(IP):
        if p.haslayer(Raw):
            try:
                packet_info = {"PcapID": pcap, "PIN": pkt_no, "time": p.time, "src": p[IP].src, "dest": p[IP].dst, "protocol": p[IP].proto, "seq-window": p[IP].id, "length": p[IP].len, "Load": base64.urlsafe_b64encode(p[Raw].load)}
                json.dump(packet_info, _test, sort_keys=True, indent=4, separators=(',', ': '))
                packet_data.append(packet_info)

            except:
                packet_info = {"PcapID": pcap, "PIN": pkt_no, "time": p.time, "src": p[IP].src, "dest": p[IP].dst, "protocol": p[IP].proto, "seq-window": p[IP].id, "length": p[IP].len, "Load": "Invalid data"}
                packet_data.append(packet_info)

        else:
            packet_info = {"PcapID": pcap, "PIN": pkt_no, "time": p.time, "src": p[IP].src, "dest": p[IP].dst, "protocol": p[IP].proto, "seq-window": p[IP].id, "length": p[IP].len, "Load": "None"}        
            packet_data.append(packet_info)
   
    if p.haslayer(ARP):
        packet_info = {"PcapID": pcap, "PIN": pkt_no, "time": p.time, "src": p[ARP].psrc, "dest": p[ARP].pdst, "protocol": 54, "seq-window": 0, "length": p[ARP].plen, "Load": "None"}
        packet_data.append(packet_info)


pcap_data = {"PcapID": pcap}
pcap_data["Packets"] = packet_data 

json.dump(pcap_data, pcap_json, sort_keys=False, indent=4, separators=(',', ': '))
pcap_json.close()
_test.close()
os.remove("_temp")


sys.stdout = sys.__stdout__
if pkt_no > 0:
    print " Packet info written to pcap.json"
    print " "
if pkt_no == 0:
    print " No Packet Traffic Found "
    print " "
